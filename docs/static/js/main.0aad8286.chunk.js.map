{"version":3,"sources":["serviceWorker.js","index.tsx"],"names":["Boolean","window","location","hostname","match","codes","hello","add1","cons","ReactDOM","render","React","useState","loading","setLoading","code","setCode","useEffect","scriptjs","rows","cols","value","onChange","e","target","onClick","parse","Object","keys","map","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IAAMC,EAAQ,CACZC,MAAM,gGAMNC,KAAK,uEAKLC,KAAK,+BAkCPC,IAASC,OAAO,mBA9BJ,WAAO,IAAD,EACcC,IAAMC,UAAS,GAD7B,mBACTC,EADS,KACAC,EADA,OAEQH,IAAMC,SAASP,EAAMC,OAF7B,mBAETS,EAFS,KAEHC,EAFG,KAQhB,OALAL,IAAMM,WAAU,WACdC,IAAS,qDAAqD,WAC5DJ,GAAW,QAEZ,IACCD,EAAgB,8BAElB,6BACE,wCACA,8BACEM,KAAM,EACNC,KAAM,GACNC,MAAON,EACPO,SAAU,SAAAC,GAAC,OAAIP,EAAQO,EAAEC,OAAOH,UAElC,6BACE,4BAAQI,QAAS,kBAAMC,MAAMX,KAA7B,OACA,4BAAQO,SAAU,SAAAC,GAAC,OAAIP,EAAQX,EAAMkB,EAAEC,OAAOH,UAC3CM,OAAOC,KAAKvB,GAAOwB,KAAI,SAAAd,GAAI,OAC1B,4BAAQM,MAAON,GAAOA,WAQlB,MAASe,SAASC,eAAe,SD2E3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0aad8286.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport scriptjs from \"scriptjs\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { CodeGenerator } from \"@babel/generator\";\n\ndeclare function parse(code: string): void;\n\nconst codes = {\n  hello: `\\\n(begin\n  (define msg \"Hello World!\")\n  (define hello (lambda () (alert msg)))\n  (hello))\n`,\n  add1: `\\\n(begin\n  (define add1 (lambda (x) (+ x 1)))\n  (alert (add1 10)))\n`,\n  cons: `(alert (cons 1 (cons 2 3)))`\n};\ntype CodeName = keyof typeof codes;\n\nconst App = () => {\n  const [loading, setLoading] = React.useState(true);\n  const [code, setCode] = React.useState(codes.hello);\n  React.useEffect(() => {\n    scriptjs(\"//cdn.rawgit.com/her0e1c1/schemejs/master/main.js\", () => {\n      setLoading(false); // import `parse` function\n    });\n  }, []);\n  if (loading) return <div />;\n  return (\n    <div>\n      <h1>Schemejs</h1>\n      <textarea\n        rows={5}\n        cols={40}\n        value={code}\n        onChange={e => setCode(e.target.value)}\n      />\n      <div>\n        <button onClick={() => parse(code)}>RUN</button>\n        <select onChange={e => setCode(codes[e.target.value as CodeName])}>\n          {Object.keys(codes).map(code => (\n            <option value={code}>{code}</option>\n          ))}\n        </select>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}